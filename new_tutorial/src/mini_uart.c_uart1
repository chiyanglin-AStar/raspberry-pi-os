#include "utils.h"
#include "peripherals/mini_uart.h"
#include "peripherals/gpio.h"
//#define UART__0 1

/*
https://github.com/bztsrc/raspi3-tutorial version
*/

void uart_send(unsigned int c) {
    /* wait until we can send */
    do{asm volatile("nop");}while(*((volatile unsigned int*)UART0_FR) & 0x20);
    /* write the character to the buffer */
    *((volatile unsigned int*)UART0_DR)=c;
}

//char uart_getc() {
char uart_recv(void){
    char r;
    /* wait until something is in the buffer */
    do{asm volatile("nop");}while(*((volatile unsigned int*)UART0_FR) & 0x10);
    /* read it and return */
    r=(char)(*((volatile unsigned int*)UART0_DR));
    /* convert carrige return to newline */
    return r=='\r'?'\n':r;
}

/*
https://github.com/bztsrc/raspi3-tutorial version
*/
void uart_send_string(char* s){
    while(*s) {
        /* convert newline to carriage return + newline */
        if(*s=='\n')
            uart_send('\r');
        uart_send(*s++);
    }
}

void uart_init ( void )
{
	register unsigned int r;
	/* initialize UART */
	*((volatile unsigned int*)UART0_CR) = 0;         // turn off UART0

	/* map UART0 to GPIO pins */
	r=*((volatile unsigned int*)GPFSEL1);
	r&=~((7<<12)|(7<<15)); // gpio14, gpio15
	r|=(4<<12)|(4<<15);    // alt0
	*((volatile unsigned int*)GPFSEL1) = r;
	*((volatile unsigned int*)GPPUD) = 0;            // enable pins 14 and 15
	r=150; while(r--) { asm volatile("nop"); }
	*((volatile unsigned int*)GPPUDCLK0) = (1<<14)|(1<<15);
	r=150; while(r--) { asm volatile("nop"); }
	*((volatile unsigned int*)GPPUDCLK0) = 0;        // flush GPIO setup

	*((volatile unsigned int*)UART0_ICR)  = 0x7FF;     // clear interrupts
	*((volatile unsigned int*)UART0_IBRD) = 2;         // 115200 baud
	*((volatile unsigned int*)UART0_FBRD) = 0xB;
	*((volatile unsigned int*)UART0_LCRH) = 0x7<<4;    // 8n1, enable FIFOs
	*((volatile unsigned int*)UART0_CR)   = 0x301;     // enable Tx, Rx, UART	
}

// This function is required by printf function
void putc ( void* p, char c)
{
	uart_send(c);
}